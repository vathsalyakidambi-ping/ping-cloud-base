kind: Kustomization
apiVersion: kustomize.config.k8s.io/v1beta1

resources:
- ../../k8s-configs/cluster-tools
- pgo
- monitoring/prometheus
- logging
- priorityclass.yaml

components:
  - monitoring/pgo

generatorOptions:
  disableNameSuffixHash: true

# In the "kustomize" overlay for CI/CD environments, manually create the "newrelic-license-key" secret in the "newrelic" namespace instead of using the "newrelic-license-secret-exporter" job to automate it. Otherwise, concurrent branch pipelines can fail because the "newrelic" namespace is shared across all "ping-cloud" branch pipelines and the updating immutable fields in the exporter job can fail.

secretGenerator:
- name: newrelic-license-key
  namespace: newrelic
  literals:
  - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}

configMapGenerator:
- name: logging-bootstrap-environment-variables
  behavior: merge
  literals:
    - SERVICE_SSM_PATH_PREFIX=${SERVICE_SSM_PATH_PREFIX}
    - REGION=${REGION}

- name: elk-environment-variables
  behavior: merge
  literals:
    - CLUSTER_NAME=${CLUSTER_NAME}

# Pingcloud-healthcheck
- name: cluster-health-environment-variables
  behavior: merge
  envs:
  - ../ping-cloud/env_vars

- name: prometheus-environment-variables
  behavior: merge
  envs:
    - ../ping-cloud/env_vars
  literals:
    - PROMETHEUS_PING_NAMESPACE=${PING_CLOUD_NAMESPACE}

patchesStrategicMerge:

### Lets encrypt ACME certificate issuer for the cluster ###
- |-
  apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    name: letsencrypt-prod
  spec:
    acme:
      server: https://acme-staging-v02.api.letsencrypt.org/directory
      email: ${CLUSTER_NAME_LC}@${TENANT_DOMAIN}
      solvers:
      - dns01:
          route53:
            region: ${REGION}
        selector:
          dnsZones:
          - '${TENANT_DOMAIN}'

### Lets encrypt ACME certificate for all endpoints ###
- |-
  apiVersion: cert-manager.io/v1
  kind: Certificate
  metadata:
    name: acme-tls-cert
    namespace: cert-manager
  spec:
    dnsNames:
      - '*.${TENANT_DOMAIN}'
    keystores:
      pkcs12:
        create: true
        # Password used to encrypt the keystore into which the ACME certs will be added
        passwordSecretRef:
          name: pingcommon-passwords
          key: ACME_CERT_KEYSTORE_PASSWORD

### Cloud-watch logging and monitoring ###
- |-
  apiVersion: v1
  data:
    cluster.name: ${CLUSTER_NAME}
    logs.region: ${REGION}
    newrelic_cluster_name: ${NEW_RELIC_ENVIRONMENT_NAME}
  kind: ConfigMap
  metadata:
    name: cluster-info

- |-
  apiVersion: v1
  data:
    # Configuration is in Json format. No matter what configure change you make,
    # please keep the Json blob valid.
    cwagentconfig.json: |
      {
        "agent": {
          "region": "${REGION}"
        },
        "logs": {
          "metrics_collected": {
            "kubernetes": {
              "cluster_name": "${CLUSTER_NAME}",
              "metrics_collection_interval": 60
            }
          },
          "force_flush_interval": 5
        }
      }
  kind: ConfigMap
  metadata:
    name: cwagentconfig
    namespace: amazon-cloudwatch

# NewRelic resources
- |-
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: nri-bundle-nri-prometheus-config
    namespace: newrelic
  data:
    config.yaml: |
      cluster_name: ${NEW_RELIC_ENVIRONMENT_NAME}
      audit: false
      insecure_skip_verify: false
      require_scrape_enabled_label_for_nodes: true
      scrape_enabled_label: prometheus.io/scrape
      scrape_endpoints: false
      scrape_services: true
      transformations:
      - description: Low data mode defaults
        ignore_metrics:
        - prefixes:
          - kube_
          - container_
          - machine_
          - cadvisor_
      verbose: false

- |-
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: nri-bundle-nri-kube-events-config
    namespace: newrelic
  data:
    config.yaml: |-
      sinks:
      - name: newRelicInfra
        config:
          agentEndpoint: http://localhost:8001/v1/data
          clusterName: ${NEW_RELIC_ENVIRONMENT_NAME}
          agentHTTPTimeout: 30s

- |-
  apiVersion: v1
  kind: ConfigMap
  metadata:
    namespace: newrelic
    name: nri-bundle-nrk8s-agent-controlplane
  data:
    newrelic-infra.yml: |-
      # This is the configuration file for the infrastructure agent. See:
      # https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings/
      custom_attributes:
        clusterName: ${NEW_RELIC_ENVIRONMENT_NAME}
      # Report metric data about all the operating system's processes (PDO-4178)
      enable_process_metrics: true
      http_server_enabled: true
      http_server_port: 8001
      is_forward_only: true

- |-
  apiVersion: v1
  kind: ConfigMap
  metadata:
    namespace: newrelic
    name: nri-bundle-nrk8s-agent-ksm
  data:
    newrelic-infra.yml: |-
      # This is the configuration file for the infrastructure agent. See:
      # https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings/
      custom_attributes:
        clusterName: ${NEW_RELIC_ENVIRONMENT_NAME}
      http_server_enabled: true
      http_server_port: 8002
      is_forward_only: true

- |-
  apiVersion: v1
  kind: ConfigMap
  metadata:
    namespace: newrelic
    name: nri-bundle-nrk8s-agent-kubelet
  data:
    newrelic-infra.yml: |-
      # This is the configuration file for the infrastructure agent. See:
      # https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings/
      custom_attributes:
        clusterName: ${NEW_RELIC_ENVIRONMENT_NAME}
      features:
        docker_enabled: false
      http_server_enabled: true
      http_server_port: 8003

# In the "kustomize" overlay for CI/CD environments, manually create the "newrelic-license-key" secret in the "newrelic" namespace instead of using the "newrelic-license-secret-exporter" job to automate it. Otherwise, concurrent branch pipelines can fail because the "newrelic" namespace is shared across all "ping-cloud" branch pipelines and the updating immutable fields in the exporter job can fail.

- |-
  apiVersion: batch/v1
  kind: Job
  metadata:
    name: newrelic-license-secret-exporter
    namespace: newrelic
  $patch: delete

- |-
  apiVersion: v1
  kind: Secret
  metadata:
    name: nr-license-key
    namespace: elastic-stack-logging
  data:
    NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY_BASE64}

# Delete the CloudWatch DaemonSet to reduce costs in a developer environment
# Comment out to in order to enable CloudWatch if required for testing
- |-
  apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    name: cloudwatch-agent
    namespace: amazon-cloudwatch
  $patch: delete

patchesJson6902:

### Patch to inject environment variables to SigSci agent container ###
- target:
    group: apps
    version: v1
    kind: Deployment
    name: nginx-ingress-controller
    namespace: ingress-nginx-public
  patch: |-
    - op: replace
      path: /spec/template/spec/containers/1/env/0/value
      value: ${REGION}

    - op: replace
      path: /spec/template/spec/containers/1/env/1/value
      value: ${BELUGA_ENV_NAME}

# Change the default TLS secret for the ingress controllers
- target:
    group: apps
    version: v1
    kind: Deployment
    name: nginx-ingress-controller
    namespace: ingress-nginx-private
  patch: |-
    - op: add
      path: /spec/template/spec/containers/0/args/-
      value:
        --default-ssl-certificate=${PING_CLOUD_NAMESPACE}/acme-tls-cert

- target:
    group: apps
    version: v1
    kind: Deployment
    name: nginx-ingress-controller
    namespace: ingress-nginx-public
  patch: |-
    - op: add
      path: /spec/template/spec/containers/0/args/-
      value:
        --default-ssl-certificate=${PING_CLOUD_NAMESPACE}/acme-tls-cert

# Update nginx memory request & limit to support dev-env and CI/CD workloads
- target:
    group: apps
    version: v1
    kind: Deployment
    name: nginx-ingress-controller
    namespace: ingress-nginx-public
  patch: |-
    - op: replace
      path: /spec/template/spec/containers/0/resources/limits/memory
      value: 2.5Gi
    - op: replace
      path: /spec/template/spec/containers/0/resources/requests/memory
      value: 2.5Gi

  # Update nginx replica count to support dev-env and CI/CD workloads.
- target:
    group: autoscaling
    version: v1
    kind: HorizontalPodAutoscaler
    name: nginx-ingress-controller
    namespace: ingress-nginx-public
  patch: |-
    - op: replace
      path: /spec/minReplicas
      value: 3
    - op: replace
      path: /spec/maxReplicas
      value: 3

# Cluster auto-scaler
- target:
    group: apps
    version: v1
    kind: Deployment
    name: cluster-autoscaler
    namespace: kube-system
  patch: |-
    - op: add
      path: /spec/template/spec/containers/0/command/-
      value:
        --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/${CLUSTER_NAME}
    - op: add
      path: /spec/template/spec/containers/0/env
      value:
        - name: AWS_REGION
          value: ${REGION}

# Change the namespace of the ACME certificate to the ping-cloud namespace
- target:
    group: cert-manager.io
    version: v1
    kind: Certificate
    name: acme-tls-cert
    namespace: cert-manager
  patch: |-
    - op: replace
      path: /metadata/namespace
      value: ${PING_CLOUD_NAMESPACE}

# Configure external-dns to only own the hosted zone for the tenant domain
# Also, change its update policy to "sync" so records are cleaned up in dev hosted zones
- target:
    group: apps
    version: v1
    kind: Deployment
    name: external-dns
    namespace: external-dns
  patch: |-
    - op: replace
      path: /spec/template/spec/containers/0/args
      value:
        - --source=service
        - --source=ingress
        - --provider=aws
        - --policy=sync
        - --aws-zone-type=public
        - --registry=txt
        - --publish-internal-services
        - --domain-filter=${TENANT_DOMAIN}.

# Make the admin nodes available externally for test purposes. In general, they
# will be behind a VPN gateway on all CDEs so only admins have access to them.
- target:
    version: v1
    kind: Service
    name: ingress-nginx
    namespace: ingress-nginx-private
  patch: |-
    - op: remove
      path: /metadata/annotations/service.beta.kubernetes.io~1aws-load-balancer-internal

# Newrelic resources
- target:
    group: apps
    version: v1
    kind: Deployment
    name: nri-bundle-nri-metadata-injection
    namespace: newrelic
  patch: |-
    - op: replace
      path: /spec/template/metadata/annotations/CLUSTER_NAME
      value: ${NEW_RELIC_ENVIRONMENT_NAME}

- target:
    group: apps
    version: v1
    kind: Deployment
    name: nri-bundle-nrk8s-ksm
    namespace: newrelic
  patch: |-
    - op: replace
      path: /spec/template/metadata/annotations/CLUSTER_NAME
      value: ${NEW_RELIC_ENVIRONMENT_NAME}

- target:
    group: apps
    version: v1
    kind: DaemonSet
    name: nri-bundle-nrk8s-kubelet
    namespace: newrelic
  patch: |-
    - op: replace
      path: /spec/template/metadata/annotations/CLUSTER_NAME
      value: ${NEW_RELIC_ENVIRONMENT_NAME}

- target:
    group: apps
    version: v1
    kind: DaemonSet
    name: nri-bundle-nrk8s-controlplane
    namespace: newrelic
  patch: |-
    - op: replace
      path: /spec/template/metadata/annotations/CLUSTER_NAME
      value: ${NEW_RELIC_ENVIRONMENT_NAME}

- target:
    group: apps
    version: v1
    kind: Deployment
    name: nri-bundle-newrelic-metadata
    namespace: newrelic
  patch: |-
    - op: replace
      path: /spec/template/metadata/annotations/CLUSTER_NAME
      value: ${NEW_RELIC_ENVIRONMENT_NAME}

# Add a priorityclass for monitoring daemons to try to make sure it pre-empts existing pods on a very
# busy node to try to improve node use efficiency/scaling without breaking things
- target:
    group: apps
    version: v1
    kind: DaemonSet
    name: nri-bundle-nrk8s-controlplane
    namespace: newrelic
  patch: |-
    - op: add
      path: /spec/template/spec/priorityClassName
      value: cluster-tool-daemonset-priority

- target:
    group: apps
    version: v1
    kind: DaemonSet
    name: nri-bundle-nrk8s-kubelet
    namespace: newrelic
  patch: |-
    - op: add
      path: /spec/template/spec/priorityClassName
      value: cluster-tool-daemonset-priority

- target:
    group: apps
    version: v1
    kind: DaemonSet
    name: cloudwatch-agent
    namespace: amazon-cloudwatch
  patch: |-
    - op: add
      path: /spec/template/spec/priorityClassName
      value: cluster-tool-daemonset-priority

- target:
    group: apps
    version: v1
    kind: DaemonSet
    name: fluent-bit
    namespace: elastic-stack-logging
  patch: |-
    - op: add
      path: /spec/template/spec/priorityClassName
      value: cluster-tool-daemonset-priority
