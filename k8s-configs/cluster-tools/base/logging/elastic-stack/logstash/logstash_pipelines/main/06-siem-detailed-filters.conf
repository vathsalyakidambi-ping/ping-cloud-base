filter {
    # PROCESS PING DIRECTORY LOGS
    # LOGS ARE SENT IN A CUSTOM FORMAT, AND THIS CONFIG MATCHES AND PARSES THEM.
  if([log_type] == "PD_Access_Log"){
    kv {
      source => "[log]"
      value_split => "="
      include_brackets => true
    }
    grok {
      match => { "log" => "%{WORD:log_name} \[%{GREEDYDATA:timestamp}\] %{NOTSPACE:ldapType} (?<ldapExtraType>(\w+ )?)%{WORD}=%{GREEDYDATA}" }
      remove_field => ["log"]
    }
    date {
      match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss.SSS Z"]
    }
    mutate{
      gsub => [ "filter", '"', "" ]
      gsub => [ "dn", '"', "" ]
      gsub => [ "requesterIP", "internal", "127.0.0.1" ]
      rename => { "msg" => "message" }
    }
    geoip {
      source => "requesterIP"
    }
    translate {
      source => "requesterIP"
      target => "threat_intel"
      fallback => "No"
      dictionary_path => '/enrichment-cache-files/AlienVaultIP.yml'
      refresh_behaviour => "replace"
    }
    translate {
      source => "requesterIP"
      target => "tor_intel"
      fallback => "No"
      dictionary_path => '/enrichment-cache-files/TorNodes.yml'
      refresh_behaviour => "replace"
    }
    translate {
      source => "[geoip][country_name]"
      target => "malicious_country"
      fallback => "No"
      dictionary_path => '/enrichment-cache-files/MaliciousCountries.yml'
      refresh_behaviour => "replace"
    }
    translate {
      source => "[geoip][country_name]"
      target => "known_country"
      fallback => "No"
      dictionary_path => '/enrichment-cache-files/KnownCountries.yml'
      refresh_behaviour => "replace"
    }
    if([malicious_country] == "No" and [known_country] == "No"){
      mutate {
        add_field => { "suspicious_country" => "YES" }
      }
    }
  }
  # PROCESS PING FEDERATE LOGS
  if ([log_group] == "SIEM") {
    if ([kubernetes][container_name] =~ "pingfederate(-admin)?") {
      geoip {
        source => "ip"
      }
      #Security Enrichments begin here, ENRICH THE IP ADDRESS DETAIL
      translate {
        source => "ip"
        target => "threat_intel"
        fallback => "No"
        dictionary_path => '/enrichment-cache-files/AlienVaultIP.yml'
        refresh_behaviour => "replace"
      }
      translate {
        source => "ip"
        target => "tor_intel"
        fallback => "No"
        dictionary_path => '/enrichment-cache-files/TorNodes.yml'
        refresh_behaviour => "replace"
      }
      translate {
        source => "[geoip][country_name]"
        target => "malicious_country"
        fallback => "No"
        dictionary_path => '/enrichment-cache-files/MaliciousCountries.yml'
        refresh_behaviour => "replace"
      }
      translate {
        source => "[geoip][country_name]"
        target => "known_country"
        fallback => "No"
        dictionary_path => '/enrichment-cache-files/KnownCountries.yml'
        refresh_behaviour => "replace"
      }
      if([malicious_country] == "No" and [known_country] == "No"){
        mutate {
          add_field => { "suspicious_country" => "YES" }
        }
      }
      #Query for previous logins in Elasticsearch, if login is found append data to the log
      #IF A SUCCESSFUL LOGIN OCCURS, Query ES to see if the the attempt was successful in the past to determine distance from previous login.
      if([status] == "success" and [event] == "AUTHN_ATTEMPT" and "_geoip_lookup_failure" not in [tags]){
        elasticsearch {
          index => "pf-audit*"
          query_template => "/etc/logstash/templates/6hr-1200km-template.json"
          hosts => "${ELASTICSEARCH_HOSTS}"
          add_field => {"found_distance_alert" => "YES"}
          fields => {
            "subject" => "found_subject"
            "ip" => "found_ip"
            "[geoip][country_name]" => "found_country"
            "[geoip][city_name]" => "found_city_name"
            "[geoip][latitude]" => "[found_geoip][latitude]"
            "[geoip][longitude]" => "[found_geoip][longitude]"
            "[geoip][location]" => "[found_geoip][location]"
          }
        }
      }
    }
    # PROCESS PING ACCESS AUDIT LOG
    # PING ACCESS IS SENDING IN LOG4J FORMAT (JSON), SO PARSING IS MUCH LIKE PING FED.
    if([kubernetes][container_name] =~ "pingaccess(-was)?(-admin)?"){
      geoip {
        source => "client"
      }
      translate {
        source => "client"
        target => "threat_intel"
        fallback => "No"
        dictionary_path => '/enrichment-cache-files/AlienVaultIP.yml'
        refresh_behaviour => "replace"
      }
      translate {
        source => "client"
        target => "tor_intel"
        fallback => "No"
        dictionary_path => '/enrichment-cache-files/TorNodes.yml'
        refresh_behaviour => "replace"
      }
      translate {
        source => "[geoip][country_name]"
        target => "malicious_country"
        fallback => "No"
        dictionary_path => '/enrichment-cache-files/MaliciousCountries.yml'
        refresh_behaviour => "replace"
      }
      translate {
        source => "[geoip][country_name]"
        target => "known_country"
        fallback => "No"
        dictionary_path => '/enrichment-cache-files/KnownCountries.yml'
        refresh_behaviour => "replace"
      }
      if([malicious_country] == "No" and [known_country] == "No"){
        mutate {
          add_field => { "suspicious_country" => "YES" }
        }
      }
    }
  }
}