filter {
  if ([log_type] == "ping-apps") {
    if ([log] =~ /^\/opt\/out\/instance(\/\w+)?\/log[s]?/) {
      grok {
        match => {
          "log" => [ "^\/opt\/out\/instance(\/\w+)?\/log[s]?\/%{DATA:log_name}(\.log)?(\.out)? %{GREEDYDATA:log_string}" ]
        }
      }
      mutate {
        gsub => [ "log", "\\n", "\n" ]
        gsub => [ "log", "\/opt\/out\/instance(\/\w+)?\/log[s]?\/\w+(\.log)?(\.out)?", ""]
        gsub => [ "log_string", "\/opt\/out\/instance(\/\w+)?\/log[s]?\/\w+(\.log)?(\.out)? ", ""]
        replace => { "log_type" => "ping_app_logs" }
        remove_field => ["log"]
      }

      if ([kubernetes][container_name] =~ "pingaccess(-was)?(-admin)?") {
        if ([log_name] == "pingaccess_engine_audit") {
          grok {
            match => {
              "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:exchangeId}\| %{DATA:trackingId}\| %{NUMBER:roundTripMS} ms\| %{NUMBER:proxyRoundTripMS} ms\| %{DATA:resource}\| %{DATA:subject}\| %{DATA:authMech}\| %{DATA:client}\| %{WORD:method}\| %{DATA:requestUri}\| %{NUMBER:responseCode}\| %{DATA:failedRuleType}\| %{DATA:failedRuleName}\| %{DATA:applicationName}\| %{DATA:resourceName}\| %{GREEDYDATA:pathPrefix}" ]
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "pingaccess_api_audit") {
          grok {
            match => {
              "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:exchangeId}\| %{DATA:trackingId}\| %{NUMBER:roundTripMS} ms\| %{WORD:subject}\| %{WORD:authMech}\| %{DATA:client}\| %{WORD:method}\| %{DATA:requestUri}\| %{NUMBER:responseCode}" ]
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "pingaccess_agent_audit") {
          grok {
            match => {
              "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:exchangeId}\| %{DATA:trackingId}\| %{NUMBER:roundTripMS} ms\| %{DATA:resource}\| %{DATA:client}\| %{WORD:method}\| %{DATA:requestUri}\| %{NUMBER:responseCode}\| %{DATA:applicationName}\| %{DATA:resourceName}\| %{GREEDYDATA:pathPrefix}" ]
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "pingaccess_sideband_client_audit") {
          grok {
            match => {
              "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:exchangeId}\| %{DATA:trackingId}\| %{NUMBER:roundTripMS} ms\| %{DATA:client}\| %{WORD:method}\| %{DATA:requestUri}\| %{NUMBER:responseCode}\| %{DATA:sidebandName}\| %{GREEDYDATA:sidebandDecision}" ]
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "pingaccess_sideband_audit") {
          grok {
            match => {
              "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:exchangeId}\| %{DATA:trackingId}\| %{NUMBER:roundTripMS} ms\| %{DATA:resource}\| %{DATA:client}\| %{WORD:method}\| %{DATA:requestUri}\| %{NUMBER:responseCode}\| %{DATA:applicationName}\| %{DATA:resourceName}\| %{DATA:pathPrefix}\| %{GREEDYDATA:sidebandName}" ]
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "pingaccess") {
          grok {
            match => {
              "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,2}%{WORD:logLevel} \[%{DATA:exchangeId}\] %{DATA:className} - %{GREEDYDATA:message}" ]
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "audit") {
          grok {
            match => {
              "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:message}"]
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "upgrade") {
          grok {
            match => {
              "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,2}%{WORD:logLevel} %{DATA:className}:%{NUMBER:position} - %{GREEDYDATA:message}"]
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "upgrade_status") {
          mutate {
            rename => { "log_string" => "message" }
          }
        }
        if ([timestamp]) {
          date {
            match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss"]
          }
        }
      } else if ([kubernetes][container_name] == "pingdirectory" or [kubernetes][container_name] == "pingdatasync") {
        if ([log_name] == "sync-failed-ops" ) {
          mutate {
            rename => { "log_string" => "message" }
          }
        } else if ! ([log_name] == "server" and [log_string] =~ "^\[.*\] [A-Z_]{1,20} ") {
          kv {
            source => "[log_string]"
            value_split => "="
            field_split => " \n"
            include_brackets => true
          }
        } else {
          grok {
            match => { "log_string" => "\[%{DATA:timestamp}\] %{WORD:severity} %{GREEDYDATA:msg}" }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "errors" or [log_name] == "replication" or [log_name] == "server")  {
          grok {
            match => {
              "log_string" => "\[%{DATA:timestamp}\] %{GREEDYDATA}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "failed-ops" or [log_name] == "expensive-write-ops" or [log_name] == "access" ) {
          grok {
            match => { "log_string" => "\[%{DATA:timestamp}\] %{NOTSPACE:ldapType} (?<ldapExtraType>(\w+ )?)%{WORD}=%{GREEDYDATA}" }
            remove_field => ["log_string"]
          }
        }
        if ([kubernetes][container_name] == "pingdirectory" and [log_name] == "failed-ops") {
            mutate {
              replace => { "log_type" => "PD_Failed_Ops"}
            }
        }
        if ([timestamp]) {
            date {
              match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss.SSS Z", "dd/MMM/yyyy:HH:mm:ss Z"]
            }
        }
        mutate{
          gsub => [ "filter", '"', "" ]
          gsub => [ "dn", '"', "" ]
          gsub => [ "requesterIP", "internal", "127.0.0.1" ]
        }
      } else if ([kubernetes][container_name] =~ "pingfederate(-admin)?") {
        if ([log_name] == "admin-api" or [log_name] == "runtime-api") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:user}\| %{DATA:authType}\| %{DATA:clientIP}\| %{WORD:httpMethod}\| %{DATA:url}\| %{NUMBER:status}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "admin-event-detail") {
          grok {
            match => {
              "log_string" => "%{DATA:eventDetailId} \| %{DATA:filename} \| %{DATA:delta} \| %{DATA:position} \| %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "admin") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp} \| %{DATA:user} \| %{DATA:roles} \| %{DATA:ip} \| %{DATA:component} \| %{DATA:event} \| %{DATA:eventDetailId} \| %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "transaction") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp}  \| %{DATA:host} \| %{WORD:log_level} \| %{DATA:event} \| Connection ID: %{DATA:connectionId} \| Virtual Server ID: %{DATA:virtualServerId} \| %{DATA:urn} \| %{DATA:eventType} \| SAML ID: %{DATA:samlId}( \| Endpoint: %{DATA:endpoint})?( \| SAML Subject: %{DATA:samlSubject})?( \| %{DATA:binding})?( \| SignatureStatus: %{DATA:signatureStatus})?( \| %{DATA:xmlMessage})?$"
            }
            remove_field => ["log_string"]
          }
          mutate {
            replace => { "log_type" => "PF_Transaction_Log"}
          }
        }
        if ([log_name] == "audit") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:trackingId}\| %{DATA:event}\| %{DATA:subject}\| %{DATA:ip} \| %{DATA:app}\| %{DATA:connectionId}\| %{DATA:protocol}\| %{DATA:host}\| %{DATA:role}\| %{DATA:status}\| %{DATA:adapterId}\| %{DATA:description}\| %{NUMBER:responseTime}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "provisioner-audit") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:cycleId}\| %{DATA:channelId}\| %{DATA:eventType}\| %{DATA:sourceId}\| %{DATA:targetId}\| %{DATA:isSuccess}\| %{GREEDYDATA:nonSuccessCause}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "provisioner") {
          grok {
            match => {
              "log_string" => "%{DATA}[ ]{1,3}%{WORD:logLevel}[ ]{1,3}\[%{DATA:className}\] %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "server") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp}( %{DATA:trackingId})? %{WORD:logLevel}[ ]{1,3}\[%{DATA:className}\] %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "init") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "jvm-garbage-collection") {
          grok {
            match => {
              "log_string" => "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{DATA:secondsFromStart}s\]\[%{WORD:logLevel}\]\[%{DATA:categories}\] %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] =~ "request") {
          grok {
            match => {
              "log_string" => "(%{IPORHOST:clientip})? %{HTTPDUSER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|- )( \"%{NOTSPACE:referer}\")?( \"%{NOTSPACE:useragent}\")?"
            }
            remove_field => ["log_string"]
          }
        }
        if ([timestamp]) {
          date {
            match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss", "HH:mm:ss,SSS", "dd/MMM/yyyy:HH:mm:ss Z"]
          }
        }
      } else if ([kubernetes][container_name] == "pingcentral") {
        if ([log_name] == "application-ext" or [log_name] == "application") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,3}%{WORD:logLevel}[ ]{1,3}%{DATA:className}:%{NUMBER:position} - %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "monitor") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp} \| %{DATA:className} %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "application-api") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp} \| %{DATA:className} %{WORD:user} \| %{WORD:method} \| %{DATA:client} \| %{DATA:requestUri} \| %{NUMBER:responseCode}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([timestamp]) {
          date {
            match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss" ]
          }
        }
      } else if ([kubernetes][container_name] == "pingdelegator") {
        if ([log_name] == "access") {
          grok {
            match => {
              "log_string" => "%{DATA:client} - %{DATA:user} \[%{DATA:timestamp}\] \"%{WORD:method} %{DATA:url} HTTP/%{NUMBER:httpVersion}\" %{NUMBER:responseCode} %{NUMBER:bodySentBytes} \"%{DATA:referrer}\" \"%{DATA:userAgent}\" \"%{DATA:httpForwardedFor}\""
            }
            remove_field => ["log_string"]
          }
          date {
            match => [ "timestamp", "dd/MMM/yyyy:H:m:s Z", "yyyy/MM/dd HH:mm:ss" ]
          }
        }
        if ([log_name] == "error") {
          grok {
            match => {
              "log_string" => ["%{DATA:timestamp} \[%{DATA:logLevel}\] %{NUMBER:pid}#%{NUMBER:tid}: (\*%{NUMBER:connectionId} )?%{GREEDYDATA:message}"]
            }
            remove_field => ["log_string"]
          }
          date {
            match => [ "timestamp", "dd/MMM/yyyy:H:m:s Z", "yyyy/MM/dd HH:mm:ss" ]
          }
        }
      }
      # Clone logs for SIEM
      if ([kubernetes][container_name] =~ "pingaccess(-was)?(-admin)?" or [kubernetes][container_name] =~ "pingfederate(-admin)?") {
        clone {
          clones => ["SIEM"]
        }
      }
      if ([type] == "SIEM") {
        mutate {
          rename => { "type" => "log_group" }
        }
        mutate {
          copy => {"@timestamp" => "date"}
        }
      }
    }
    else {
      mutate {
        rename => { "log" => "message" }
      }
    }
  }
}
