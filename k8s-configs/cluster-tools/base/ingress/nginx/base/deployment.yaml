# FIXME: Due to the following bug in kustomize, we're having to copy the nginx
# yaml files for the private nginx service instead of using their remote
# github URL:
#
# https://github.com/kubernetes-sigs/kustomize/issues/1248
#
# The bug is that inheriting from a common base in two or more peer directories
# results in the following error for common "vars" defined in the base. For
# example, if the base kustomization has a var named "POD_NAME", then two
# peer overlays prod and staging will work independently. But when built
# together, it will result in this error:
#
# Error: accumulating resources: recursed merging from path 'staging': var
# 'POD_NAME' already encountered
#
# There is a PR for the defect, but it hasn't been merged yet. When the latest
# kustomize is released, we should get rid of this and do the kustomization in
# the same way the public ingress is done, i.e. using the remote URL from the
# nginx ingress repo.
#
# This yaml file was copied from:
# https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/cloud-generic/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
spec:
  template:
    metadata:
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      # wait up to five minutes for the drain of connections
      terminationGracePeriodSeconds: 300
      serviceAccountName: nginx-ingress-serviceaccount
      affinity:
        podAntiAffinity:
          # Add a soft requirement for each nginx pod to be deployed to a different AZ
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - ingress-nginx
              topologyKey: "failure-domain.beta.kubernetes.io/zone"
      securityContext:
        runAsNonRoot: true
      containers:
        - name: nginx-ingress-controller
          image: public.ecr.aws/r2h3l6e4/pingcloud-services/sigsci-nginx-ingress-controller:v1.0.0
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 2
              memory: 2Gi
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --http-port=8080
            - --https-port=8443
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
              # Needed for sigsci
              add:
                - NET_BIND_SERVICE
            # Official ingress controller allows root fs writes
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            # www-data -> 101
            runAsUser: 101
            runAsGroup: 101
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
