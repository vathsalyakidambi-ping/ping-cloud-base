# This yaml file was copied from:
# https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/quickstart/cwagent-fluentd-quickstart.yaml

# create amazon-cloudwatch namespace
apiVersion: v1
kind: Namespace
metadata:
  name: amazon-cloudwatch
  labels:
    name: amazon-cloudwatch
---

# create cwagent service account and role binding
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloudwatch-agent
  namespace: amazon-cloudwatch

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cloudwatch-agent-role
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "endpoints"]
    verbs: ["list", "watch"]
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["list", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources: ["nodes/proxy"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["nodes/stats", "configmaps", "events"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["cwagent-clusterleader"]
    verbs: ["get","update"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cloudwatch-agent-role-binding
subjects:
  - kind: ServiceAccount
    name: cloudwatch-agent
    namespace: amazon-cloudwatch
roleRef:
  kind: ClusterRole
  name: cloudwatch-agent-role
  apiGroup: rbac.authorization.k8s.io
---

# create configmap for cwagent config
apiVersion: v1
data:
  # Configuration is in Json format. No matter what configure change you make,
  # please keep the Json blob valid.
  cwagentconfig.json: |
    {
      "agent": {
        "region": "region_name"
      },
      "logs": {
        "metrics_collected": {
          "kubernetes": {
            "cluster_name": "cluster_name",
            "metrics_collection_interval": 60
          }
        },
        "force_flush_interval": 5
      }
    }
kind: ConfigMap
metadata:
  name: cwagentconfig
  namespace: amazon-cloudwatch

---

# deploy cwagent as daemonset
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cloudwatch-agent
  namespace: amazon-cloudwatch
spec:
  selector:
    matchLabels:
      name: cloudwatch-agent
  template:
    metadata:
      labels:
        name: cloudwatch-agent
    spec:
      containers:
        - name: cloudwatch-agent
          image: public.ecr.aws/r2h3l6e4/amazon/cloudwatch-agent:1.230621.0
          #ports:
          #  - containerPort: 8125
          #    hostPort: 8125
          #    protocol: UDP
          resources:
            limits:
              cpu:  200m
              memory: 200Mi
            requests:
              cpu: 200m
              memory: 200Mi
          # Please don't change below envs
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CI_VERSION
              value: "k8s/1.0.1"
          # Please don't change the mountPath
          volumeMounts:
            - name: cwagentconfig
              mountPath: /etc/cwagentconfig
            - name: rootfs
              mountPath: /rootfs
              readOnly: true
            - name: dockersock
              mountPath: /var/run/docker.sock
              readOnly: true
            - name: varlibdocker
              mountPath: /var/lib/docker
              readOnly: true
            - name: sys
              mountPath: /sys
              readOnly: true
            - name: devdisk
              mountPath: /dev/disk
              readOnly: true
      volumes:
        - name: cwagentconfig
          configMap:
            name: cwagentconfig
        - name: rootfs
          hostPath:
            path: /
        - name: dockersock
          hostPath:
            path: /var/run/docker.sock
        - name: varlibdocker
          hostPath:
            path: /var/lib/docker
        - name: sys
          hostPath:
            path: /sys
        - name: devdisk
          hostPath:
            path: /dev/disk/
      terminationGracePeriodSeconds: 60
      serviceAccountName: cloudwatch-agent
      tolerations:   
      - operator: Exists

---

# create configmap for cluster name and aws region for CloudWatch Logs
# need to replace the placeholders cluster_name and region_name
apiVersion: v1
data:
  cluster.name: cluster_name
  logs.region: region
kind: ConfigMap
metadata:
  name: cluster-info
  namespace: amazon-cloudwatch
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd
  namespace: amazon-cloudwatch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluentd-role
rules:
  - apiGroups: [""]
    resources:
      - namespaces
      - pods
      - pods/logs
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluentd-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fluentd-role
subjects:
  - kind: ServiceAccount
    name: fluentd
    namespace: amazon-cloudwatch
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: amazon-cloudwatch
  labels:
    k8s-app: fluentd-cloudwatch
data:
  fluent.conf: |
    @include containers.conf
    @include systemd.conf
    @include host.conf

    <match fluent.**>
      @type null
    </match>
  containers.conf: |
    <source>
      @type tail
      @id in_tail_container_logs
      @label @nonpingcontainers
      path /var/log/containers/*.log
      exclude_path ["/var/log/containers/cloudwatch-agent*", "/var/log/containers/fluentd*", "/var/log/containers/pingaccess*", "/var/log/containers/pingfederate*", "/var/log/containers/pingdirectory*", "/var/log/containers/pingdelegator*"]
      pos_file /var/log/fluentd-containers.log.pos
      tag *
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_pingaccess_container_logs
      @label @pacontainers
      path /var/log/containers/pingaccess*.log
      exclude_path ["/var/log/containers/pingaccess-was*.log"]
      pos_file /var/log/pingaccess-containers.log.pos
      tag kubernetes.*
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_pingaccess_was_container_logs
      @label @pawascontainers
      path /var/log/containers/pingaccess-was*.log
      pos_file /var/log/pingaccess-was-containers.log.pos
      tag kubernetes.*
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_pingfederate_container_logs
      @label @pfcontainers
      path /var/log/containers/pingfederate*.log
      pos_file /var/log/pingfederate-containers.log.pos
      tag kubernetes.*
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_pingdiretory_container_logs
      @label @pdcontainers
      path /var/log/containers/pingdirectory*.log
      pos_file /var/log/pingdirectory-containers.log.pos
      tag kubernetes.*
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_pingdelegator_container_logs
      @label @dacontainers
      path /var/log/containers/pingdelegator*.log
      pos_file /var/log/pingdelegator-containers.log.pos
      tag kubernetes.*
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_pingcentral_container_logs
      @label @pccontainers
      path /var/log/containers/pingcentral*.log
      pos_file /var/log/pingcentral-containers.log.pos
      tag kubernetes.*
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_cwagent_logs
      @label @cwagentlogs
      path /var/log/containers/cloudwatch-agent*
      pos_file /var/log/cloudwatch-agent.log.pos
      tag *
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_fluentd_logs
      @label @fluentdlogs
      path /var/log/containers/fluentd*
      pos_file /var/log/fluentd.log.pos
      tag *
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <label @pdcontainers>
      <filter **>
        @type kubernetes_metadata
      </filter>

      <filter **>
        @type record_transformer
        enable_ruby true
        <record>
          stream_name ${record["kubernetes"]["pod_name"]}_${record["kubernetes"]["namespace_name"]}_${record["kubernetes"]["container_name"]}
        </record>
      </filter>

      <filter **>
        @type concat
        key log
        multiline_start_regexp /\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}([,.]\d{3}){0,1}Z|\d{2}:\d{2}:\d{2}\s+ping.*-\d{1,2}|\\u001b\[0;32m/
        separator ""
        flush_interval 5
        timeout_label @normal
      </filter>

      <match kubernetes.**>
        @type rewrite_tag_filter
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/logs\/server/
          tag temp.server_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/logs\/access/
          tag temp.access_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/logs\/errors/
          tag temp.errors_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/logs\/change-notifications/
          tag temp.change_notifications_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/logs\/failed-ops/
          tag temp.failed_ops_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/logs\/expensive-write-ops/
          tag temp.expensive_write_ops_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/logs\/replication/
          tag temp.replication_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/logs\/config-audit/
          tag temp.config_audit_logs
        </rule>
        <rule>
          key log
          pattern /^(.+)$/
          tag temp.unmatched_logs
        </rule>
      </match>

      <match temp.unmatched_logs>
        @type relabel
        @label @normal
      </match>

      <match temp.**>
        @type rewrite_tag_filter
        remove_tag_prefix temp
        <rule>
          key stream_name
          pattern /^(.+)$/
          tag ${tag}.$1
        </rule>
      </match>

      <match **>
        @type relabel
        @label @tagstream
      </match>
    </label>

    <label @pfcontainers>
      <filter **>
        @type kubernetes_metadata
      </filter>

      <filter **>
        @type record_transformer
        enable_ruby true
        <record>
          stream_name ${record["kubernetes"]["pod_name"]}_${record["kubernetes"]["namespace_name"]}_${record["kubernetes"]["container_name"]}
        </record>
      </filter>

      <filter **>
        @type concat
        key log
        multiline_start_regexp /\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[,.]\d{3}|\d{2}:\d{2}:\d{2}\s+ping.*-\d{1,2}|\\u001b\[0;32m/
        separator ""
        flush_interval 5
        timeout_label @normal
      </filter>

      <match kubernetes.**>
        @type rewrite_tag_filter
        <rule>
          key log
          pattern /^\<[0-9]+\>/
          tag clear
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/admin-api.*127\.0\.0\.1\| GET\| \/version\| 200/
          tag clear
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/admin-api/
          tag temp.admin_api_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/admin-event-detail/
          tag temp.admin_event_detail_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/admin/
          tag temp.admin_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/runtime-api/
          tag temp.runtime_api_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/transaction/
          tag temp.transaction_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/audit/
          tag temp.audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/provisioner-audit/
          tag temp.provisioner_audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/provisioner/
          tag temp.provisioner_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/server/
          tag temp.server_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/init/
          tag temp.init_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/jvm-garbage-collection/
          tag temp.jvm_garbage_collection_logs
        </rule>
        <rule>
          key log
          pattern /^(.+)$/
          tag temp.unmatched_logs
        </rule>
      </match>

      <match clear>
        @type null
      </match>

      <match temp.unmatched_logs>
        @type relabel
        @label @normal
      </match>

      <match temp.**>
        @type rewrite_tag_filter
        remove_tag_prefix temp
        <rule>
          key stream_name
          pattern /^(.+)$/
          tag ${tag}.$1
        </rule>
      </match>

      <match **>
        @type relabel
        @label @tagstream
      </match>
    </label>

    <label @pacontainers>
      <filter **>
        @type kubernetes_metadata
      </filter>

      <filter **>
        @type record_transformer
        enable_ruby true
        <record>
          stream_name ${record["kubernetes"]["pod_name"]}_${record["kubernetes"]["namespace_name"]}_${record["kubernetes"]["container_name"]}
        </record>
      </filter>

      <filter **>
        @type concat
        key log
        multiline_start_regexp /\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2},\d{3}|\d{2}:\d{2}:\d{2}\s+ping.*-\d{1,2}/
        separator ""
        flush_interval 5
        timeout_label @normal
      </filter>

      <match kubernetes.**>
        @type rewrite_tag_filter
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess_api_audit.*127\.0\.0\.1\| GET\| \/pa-admin-api\/v3\/version\| 200/
          tag pa_clear
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess_engine_audit/
          tag temp.pingaccess_engine_audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess_api_audit/
          tag temp.pingaccess_api_audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess_agent_audit/
          tag temp.pingaccess_agent_audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess_sideband_client_audit/
          tag temp.pingaccess_sideband_client_audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess_sideband_audit/
          tag temp.pingaccess_sideband_audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess/
          tag temp.pingaccess_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/upgrade\/log\/audit/
          tag temp.pingaccess_upgrade_audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/upgrade\/log\/upgrade_status/
          tag temp.pingaccess_upgrade_status_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/upgrade\/log\/upgrade/
          tag temp.pingaccess_upgrade_logs
        </rule>
        <rule>
          key log
          pattern /^(.+)$/
          tag temp.unmatched_logs
        </rule>
      </match>

      <match pa_clear>
        @type null
      </match>

      <match temp.unmatched_logs>
        @type relabel
        @label @normal
      </match>

      <match temp.**>
        @type rewrite_tag_filter
        remove_tag_prefix temp
        <rule>
          key stream_name
          pattern /^(.+)$/
          tag ${tag}.$1
        </rule>
      </match>

      <match **>
        @type relabel
        @label @tagstream
      </match>
    </label>

    <label @pawascontainers>
      <filter **>
        @type kubernetes_metadata
      </filter>

      <filter **>
        @type record_transformer
        enable_ruby true
        <record>
          stream_name ${record["kubernetes"]["pod_name"]}_${record["kubernetes"]["namespace_name"]}_${record["kubernetes"]["container_name"]}
        </record>
      </filter>

      <filter **>
        @type concat
        key log
        multiline_start_regexp /\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}([,.]\d{3}){0,1}|\d{2}:\d{2}:\d{2}\s+ping.*-\d{1,2}|\\u001b\[0;32m/
        separator ""
        flush_interval 5
        timeout_label @normal
      </filter>

      <match kubernetes.**>
        @type rewrite_tag_filter
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess_api_audit.*127\.0\.0\.1\| GET\| \/pa-admin-api\/v3\/version\| 200/
          tag pawas_clear
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess_engine_audit/
          tag temp.pingaccess_engine_audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess_api_audit/
          tag temp.pingaccess_api_audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess_sideband_client_audit/
          tag temp.pingaccess_sideband_client_audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess_sideband_audit/
          tag temp.pingaccess_sideband_audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/pingaccess/
          tag temp.pingaccess_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/upgrade\/log\/audit/
          tag temp.pingaccess_upgrade_audit_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/upgrade\/log\/upgrade_status/
          tag temp.pingaccess_upgrade_status_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/upgrade\/log\/upgrade/
          tag temp.pingaccess_upgrade_logs
        </rule>
        <rule>
          key log
          pattern /^(.+)$/
          tag temp.unmatched_logs
        </rule>
      </match>

      <match pawas_clear>
        @type null
      </match>

      <match temp.unmatched_logs>
        @type relabel
        @label @normal
      </match>

      <match temp.**>
        @type rewrite_tag_filter
        remove_tag_prefix temp
        <rule>
          key stream_name
          pattern /^(.+)$/
          tag ${tag}.$1
        </rule>
      </match>

      <match **>
        @type relabel
        @label @tagstream
      </match>
    </label>

    <label @dacontainers>
      <filter **>
        @type kubernetes_metadata
      </filter>

      <filter **>
        @type record_transformer
        enable_ruby true
        <record>
          stream_name ${record["kubernetes"]["pod_name"]}_${record["kubernetes"]["namespace_name"]}_${record["kubernetes"]["container_name"]}
        </record>
      </filter>

      <match kubernetes.**>
        @type rewrite_tag_filter
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/access.*127\.0\.0\.1.*GET \/ HTTP\/2\.0.*200/
          tag clear
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/access/
          tag temp.pingdelegator_nginx_access_logs
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/error/
          tag temp.pingdelegator_nginx_error_logs
        </rule>
        <rule>
          key log
          pattern /^(.+)$/
          tag temp.unmatched_logs
        </rule>
      </match>

      <match clear>
        @type null
      </match>

      <match temp.unmatched_logs>
        @type relabel
        @label @normal
      </match>

      <match temp.**>
        @type rewrite_tag_filter
        remove_tag_prefix temp
        <rule>
          key stream_name
          pattern /^(.+)$/
          tag ${tag}.$1
        </rule>
      </match>

      <match **>
        @type relabel
        @label @tagstream
      </match>
    </label>

    <label @pccontainers>
      <filter **>
        @type kubernetes_metadata
      </filter>

      <filter **>
        @type record_transformer
        enable_ruby true
        <record>
          stream_name ${record["kubernetes"]["pod_name"]}_${record["kubernetes"]["namespace_name"]}_${record["kubernetes"]["container_name"]}
        </record>
      </filter>

      <match kubernetes.**>
        @type rewrite_tag_filter
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/application-api/
          tag temp.pingcentral_application_api
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/application-ext/
          tag temp.pingcentral_application_ext
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/application/
          tag temp.pingcentral_application
        </rule>
        <rule>
          key log
          pattern /^\/opt\/out\/instance\/log\/monitor/
          tag temp.pingcentral_monitor
        </rule>
        <rule>
          key log
          pattern /^(.+)$/
          tag temp.unmatched_logs
        </rule>
      </match>

      <match clear>
        @type null
      </match>

      <match temp.unmatched_logs>
        @type relabel
        @label @normal
      </match>

      <match temp.**>
        @type rewrite_tag_filter
        remove_tag_prefix temp
        <rule>
          key stream_name
          pattern /^(.+)$/
          tag ${tag}.$1
        </rule>
      </match>

      <match **>
        @type relabel
        @label @tagstream
      </match>
    </label>

    <label @fluentdlogs>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata_fluentd
      </filter>

      <filter **>
        @type record_transformer
        @id filter_fluentd_stream_transformer
        enable_ruby true
        <record>
          stream_name ${record["kubernetes"]["pod_name"]}_${record["kubernetes"]["namespace_name"]}_${record["kubernetes"]["container_name"]}
        </record>
      </filter>

      <match **>
        @type relabel
        @label @normal
      </match>
    </label>

    <label @nonpingcontainers>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata
      </filter>

      <filter **>
        @type record_transformer
        @id filter_containers_stream_transformer
        enable_ruby true
        <record>
          stream_name ${record["kubernetes"]["pod_name"]}_${record["kubernetes"]["namespace_name"]}_${record["kubernetes"]["container_name"]}
        </record>
      </filter>

      <filter **>
        @type concat
        key log
        multiline_start_regexp /^\S/
        separator ""
        flush_interval 5
        timeout_label @normal
      </filter>

      <match **>
        @type relabel
        @label @normal
      </match>
    </label>

    <label @cwagentlogs>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata_cwagent
      </filter>

      <filter **>
        @type concat
        key log
        multiline_start_regexp /^\d{4}[-/]\d{1,2}[-/]\d{1,2}/
        separator ""
        flush_interval 5
        timeout_label @normal
      </filter>

      <filter **>
        @type grep
        <exclude>
          key log
          pattern /^\d{4}[-/]\d{1,2}[-/]\d{1,2}[\sT]\d{2}:\d{2}:\d{2}Z*\s(W!|I!)/
        </exclude>
      </filter>

      <filter **>
        @type record_transformer
        @id filter_cwagent_stream_transformer
        enable_ruby true
        <record>
          stream_name ${record["kubernetes"]["pod_name"]}_${record["kubernetes"]["namespace_name"]}_${record["kubernetes"]["container_name"]}
        </record>
      </filter>

      <match **>
        @type relabel
        @label @normal
      </match>
    </label>

    <label @tagstream>
      <match **>
        @type cloudwatch_logs
        @id out_cloudwatch_logs_ping_containers
        region "#{ENV.fetch('REGION')}"
        log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/application"
        use_tag_as_stream true
        auto_create_stream true
        <buffer>
          flush_interval 5
          chunk_limit_size 2m
          queued_chunks_limit_size 32
          retry_forever true
        </buffer>
      </match>
    </label>

    <label @normal>
      <match **>
        @type cloudwatch_logs
        @id out_cloudwatch_logs_containers
        region "#{ENV.fetch('REGION')}"
        log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/application"
        log_stream_name_key stream_name
        remove_log_stream_name_key true
        auto_create_stream true
        <buffer>
          flush_interval 5
          chunk_limit_size 2m
          queued_chunks_limit_size 32
          retry_forever true
        </buffer>
      </match>
    </label>
  systemd.conf: |
    <source>
      @type systemd
      @id in_systemd_kubelet
      @label @systemd
      filters [{ "_SYSTEMD_UNIT": "kubelet.service" }]
      <entry>
        field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
        field_map_strict true
      </entry>
      path /var/log/journal
      <storage>
        @type local
        persistent true
        path /var/log/fluentd-journald-kubelet-pos.json
      </storage>
      read_from_head true
      tag kubelet.service
    </source>

    <source>
      @type systemd
      @id in_systemd_kubeproxy
      @label @systemd
      filters [{ "_SYSTEMD_UNIT": "kubeproxy.service" }]
      <entry>
        field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
        field_map_strict true
      </entry>
      path /var/log/journal
      <storage>
        @type local
        persistent true
        path /var/log/fluentd-journald-kubeproxy-pos.json
      </storage>
      read_from_head true
      tag kubeproxy.service
    </source>

    <source>
      @type systemd
      @id in_systemd_docker
      @label @systemd
      filters [{ "_SYSTEMD_UNIT": "docker.service" }]
      <entry>
        field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
        field_map_strict true
      </entry>
      path /var/log/journal
      <storage>
        @type local
        persistent true
        path /var/log/fluentd-journald-docker-pos.json
      </storage>
      read_from_head true
      tag docker.service
    </source>

    <label @systemd>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata_systemd
      </filter>

      <filter **>
        @type record_transformer
        @id filter_systemd_stream_transformer
        <record>
          stream_name ${tag}-${record["hostname"]}
        </record>
      </filter>

      <match **>
        @type cloudwatch_logs
        @id out_cloudwatch_logs_systemd
        region "#{ENV.fetch('REGION')}"
        log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/dataplane"
        log_stream_name_key stream_name
        auto_create_stream true
        remove_log_stream_name_key true
        <buffer>
          flush_interval 5
          chunk_limit_size 2m
          queued_chunks_limit_size 32
          retry_forever true
        </buffer>
      </match>
    </label>
  host.conf: |
    <source>
      @type tail
      @id in_tail_dmesg
      @label @hostlogs
      path /var/log/dmesg
      pos_file /var/log/dmesg.log.pos
      tag host.dmesg
      read_from_head true
      <parse>
        @type syslog
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_secure
      @label @hostlogs
      path /var/log/secure
      pos_file /var/log/secure.log.pos
      tag host.secure
      read_from_head true
      <parse>
        @type syslog
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_messages
      @label @hostlogs
      path /var/log/messages
      pos_file /var/log/messages.log.pos
      tag host.messages
      read_from_head true
      <parse>
        @type syslog
      </parse>
    </source>

    <label @hostlogs>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata_host
      </filter>

      <filter **>
        @type record_transformer
        @id filter_containers_stream_transformer_host
        <record>
          stream_name ${tag}-${record["host"]}
        </record>
      </filter>

      <match host.**>
        @type cloudwatch_logs
        @id out_cloudwatch_logs_host_logs
        region "#{ENV.fetch('REGION')}"
        log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/host"
        log_stream_name_key stream_name
        remove_log_stream_name_key true
        auto_create_stream true
        <buffer>
          flush_interval 5
          chunk_limit_size 2m
          queued_chunks_limit_size 32
          retry_forever true
        </buffer>
      </match>
    </label>
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-cloudwatch
  namespace: amazon-cloudwatch
spec:
  selector:
    matchLabels:
      k8s-app: fluentd-cloudwatch
  template:
    metadata:
      labels:
        k8s-app: fluentd-cloudwatch
      annotations:
        configHash: 8915de4cf9c3551a8dc74c0137a3e83569d28c71044b0359c2578d2e0461825
    spec:
      serviceAccountName: fluentd
      terminationGracePeriodSeconds: 30
      # Because the image's entrypoint requires to write on /fluentd/etc but we mount configmap there which is read-only,
      # this initContainers workaround or other is needed.
      # See https://github.com/fluent/fluentd-kubernetes-daemonset/issues/90
      initContainers:
        - name: copy-fluentd-config
          image: public.ecr.aws/r2h3l6e4/busybox:1.32
          command: ['sh', '-c', 'cp /config-volume/..data/* /fluentd/etc']
          volumeMounts:
            - name: config-volume
              mountPath: /config-volume
            - name: fluentdconf
              mountPath: /fluentd/etc
          # TODO: runAsNonRoot should be applied at the pod level, but limit changes to container for now
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - all
            readOnlyRootFilesystem: true
        - name: update-log-driver
          image: public.ecr.aws/r2h3l6e4/busybox:1.32
          command: ['sh','-c','']
      containers:
        - name: fluentd-cloudwatch
          image: public.ecr.aws/r2h3l6e4/fluent/fluentd-kubernetes-daemonset:v1.7.3-debian-cloudwatch-1.0
          env:
            - name: FLUENTD_OPT
              value: "-qq"
            - name: REGION
              valueFrom:
                configMapKeyRef:
                  name: cluster-info
                  key: logs.region
            - name: CLUSTER_NAME
              valueFrom:
                configMapKeyRef:
                  name: cluster-info
                  key: cluster.name
            - name: CI_VERSION
              value: "k8s/1.0.1"
          resources:
            limits:
              memory: 756Mi
            requests:
              cpu: 100m
              memory: 512Mi
          volumeMounts:
            - name: config-volume
              mountPath: /config-volume
            - name: fluentdconf
              mountPath: /fluentd/etc
            - name: varlog
              mountPath: /var/log
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: runlogjournal
              mountPath: /run/log/journal
              readOnly: true
            - name: dmesg
              mountPath: /var/log/dmesg
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: fluentd-config
        - name: fluentdconf
          emptyDir: {}
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: runlogjournal
          hostPath:
            path: /run/log/journal
        - name: dmesg
          hostPath:
            path: /var/log/dmesg
      tolerations:   
      - operator: Exists
