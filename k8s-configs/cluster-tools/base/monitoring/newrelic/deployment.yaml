---
# Source: nri-bundle/charts/kube-state-metrics/templates/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nri-bundle-kube-state-metrics
  namespace: newrelic
  labels:
    nri-bundle.version: 5.0.4
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-4.23.0
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 2.6.0
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kube-state-metrics
  replicas: 1
  template:
    metadata:
      labels:
        nri-bundle.version: 5.0.4
        app.kubernetes.io/name: kube-state-metrics
        app.kubernetes.io/instance: nri-bundle
    spec:
      hostNetwork: false
      serviceAccountName: nri-bundle-kube-state-metrics
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsUser: 65534
      containers:
      - name: kube-state-metrics
        args:
        - --resources=certificatesigningrequests
        - --resources=configmaps
        - --resources=cronjobs
        - --resources=daemonsets
        - --resources=deployments
        - --resources=endpoints
        - --resources=horizontalpodautoscalers
        - --resources=ingresses
        - --resources=jobs
        - --resources=leases
        - --resources=limitranges
        - --resources=mutatingwebhookconfigurations
        - --resources=namespaces
        - --resources=networkpolicies
        - --resources=nodes
        - --resources=persistentvolumeclaims
        - --resources=persistentvolumes
        - --resources=poddisruptionbudgets
        - --resources=pods
        - --resources=replicasets
        - --resources=replicationcontrollers
        - --resources=resourcequotas
        - --resources=secrets
        - --resources=services
        - --resources=statefulsets
        - --resources=storageclasses
        - --resources=validatingwebhookconfigurations
        - --resources=volumeattachments
        - --telemetry-port=8081
        imagePullPolicy: IfNotPresent
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/coreos/kube-state-metrics:v2.6.0
        securityContext:
          privileged: false
          runAsGroup: 65534
          runAsUser: 65534
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5

---
# Source: nri-bundle/charts/nri-metadata-injection/templates/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nri-bundle-nri-metadata-injection
  namespace: newrelic
  labels:
    nri-bundle.version: 5.0.4
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.7.0
    helm.sh/chart: nri-metadata-injection-3.0.4
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nri-metadata-injection
  template:
    metadata:
      labels:
        nri-bundle.version: 5.0.4
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: nri-metadata-injection
        app.kubernetes.io/version: 1.7.0
        helm.sh/chart: nri-metadata-injection-3.0.4
      annotations: {}
    spec:
      # Switching from dedicated service account to default one must be
      # done explicitly, otherwise upgrade fails, trying to use old
      # service account.
      serviceAccount: default
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
        runAsGroup: 1001
      hostNetwork: false
      containers:
      - name: nri-metadata-injection
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/k8s-metadata-injection:1.7.5
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: false
          runAsUser: 1001
          runAsGroup: 1001
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        env:
        - name: clusterName
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['CLUSTER_NAME']
        ports:
          - containerPort: 8443
            protocol: TCP
        volumeMounts:
        - name: tls-key-cert-pair
          mountPath: /etc/tls-key-cert-pair
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 1
        resources:
          
          limits:
            memory: 80M
          requests:
            cpu: 100m
            memory: 30M
      volumes:
      - name: tls-key-cert-pair
        secret:
          secretName: nri-bundle-nri-metadata-injection-admission

---
# Source: nri-bundle/charts/nri-prometheus/templates/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nri-bundle-nri-prometheus
  namespace: newrelic
  labels:
    nri-bundle.version: 5.0.4
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-prometheus
    app.kubernetes.io/version: 2.16.1
    helm.sh/chart: nri-prometheus-2.1.5
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nri-prometheus
  template:
    metadata:
      annotations:
        checksum/config: ccb1eaf63851097c4abf7fd036baccf66b0979e728f14bbe687d21a691119c17
      labels:
        nri-bundle.version: 5.0.4
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: nri-prometheus
    spec:
      serviceAccountName: nri-bundle-nri-prometheus
      initContainers:
        - name: wait-for-nr-license-secret
          securityContext:
            privileged: false
            runAsGroup: 2000
            runAsUser: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/bitnami/kubectl:1.23.0
          command: [ "/bin/sh", "-c" ]
          args: [ "kubectl get secret $(SECRET_NAME) && echo 'INFO: NR secret object found, skipping waiting for job completion.' || kubectl wait --for=condition=Complete --timeout=$(WAIT_TIMEOUT_SEC)s job/$(JOB_NAME)" ]
          env:
            - name: "WAIT_TIMEOUT_SEC"
              value: "300"
            - name: "JOB_NAME"
              value: "newrelic-license-secret-exporter"
            - name: "SECRET_NAME"
              value: "newrelic-license-key"
      containers:
      - name: nri-prometheus
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/nri-prometheus:2.17.0
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: false
          runAsGroup: 65534
          runAsUser: 65534
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        args:
          - "--configfile=/etc/nri-prometheus/config.yaml"
        ports:
          - containerPort: 8080
        volumeMounts:
        - name: config-volume
          mountPath: /etc/nri-prometheus/
        env:
          - name: "LICENSE_KEY"
            valueFrom:
              secretKeyRef:
                name: newrelic-license-key
                key: NEW_RELIC_LICENSE_KEY
          - name: "BEARER_TOKEN_FILE"
            value: "/var/run/secrets/kubernetes.io/serviceaccount/token"
          - name: "CA_FILE"
            value: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      volumes:
        - name: config-volume
          configMap:
            name: nri-bundle-nri-prometheus-config

---
# Source: nri-bundle/charts/nri-kube-events/templates/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nri-bundle-nri-kube-events
  namespace: newrelic
  labels:
    nri-bundle.version: 5.0.4
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 1.8.0
    helm.sh/chart: nri-kube-events-2.2.4
  annotations:
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nri-kube-events
  template:
    metadata:
      labels:
        nri-bundle.version: 5.0.4
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: nri-kube-events
        app.kubernetes.io/version: 1.8.0
        helm.sh/chart: nri-kube-events-2.2.4
    spec:
      hostNetwork: true
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      initContainers:
        - name: wait-for-nr-license-secret
          securityContext:
            privileged: false
            runAsGroup: 2000
            runAsUser: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/bitnami/kubectl:1.23.0
          command: [ "/bin/sh", "-c" ]
          args: [ "kubectl get secret $(SECRET_NAME) && echo 'INFO: NR secret object found, skipping waiting for job completion.' || kubectl wait --for=condition=Complete --timeout=$(WAIT_TIMEOUT_SEC)s job/$(JOB_NAME)" ]
          env:
            - name: "WAIT_TIMEOUT_SEC"
              value: "300"
            - name: "JOB_NAME"
              value: "newrelic-license-secret-exporter"
            - name: "SECRET_NAME"
              value: "newrelic-license-key"
      containers:
        - name: kube-events
          image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/nri-kube-events:1.9.1
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            runAsGroup: 2000
            runAsUser: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          args: ["-config", "/app/config/config.yaml", "-loglevel", "debug"]
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
        - name: forwarder
          image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/k8s-events-forwarder:1.36.1
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            runAsGroup: 2000
            runAsUser: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          ports:
            - containerPort: 8001
          env:
            - name: NRIA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: newrelic-license-key
                  key: NEW_RELIC_LICENSE_KEY

            # Using FORWARD_ONLY mode to avoid the entity creation for the events.
            - name: NRIA_IS_SECURE_FORWARD_ONLY
              value: "false"
            - name: NRIA_IS_FORWARD_ONLY
              value: "true"

            - name: NRIA_OVERRIDE_HOSTNAME_SHORT
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName

          volumeMounts:
            - mountPath: /var/db/newrelic-infra/data
              name: tmpfs-data
            - mountPath: /var/db/newrelic-infra/user_data
              name: tmpfs-user-data
            - mountPath: /tmp
              name: tmpfs-tmp
            - name: config
              mountPath: /etc/newrelic-infra.yml
              subPath: newrelic-infra.yml
      serviceAccountName: nri-bundle-nri-kube-events
      volumes:
        - name: config
          configMap:
            name: nri-bundle-nri-kube-events-agent-config
            items:
            - key: newrelic-infra.yml
              path: newrelic-infra.yml
        - name: config-volume
          configMap:
            name: nri-bundle-nri-kube-events-config
        - name: tmpfs-data
          emptyDir: {}
        - name: tmpfs-user-data
          emptyDir: {}
        - name: tmpfs-tmp
          emptyDir: {}

---
# Source: nri-bundle/charts/newrelic-infrastructure/templates/ksm/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: newrelic
  labels:
    nri-bundle.version: 5.0.4
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
  name: nri-bundle-nrk8s-ksm
spec:
  strategy: 
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: nri-bundle
      app.kubernetes.io/name: newrelic-infrastructure
      app.kubernetes.io/component: ksm
  template:
    metadata:
      labels:
        nri-bundle.version: 5.0.4
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: newrelic-infrastructure
        app.kubernetes.io/component: ksm
      annotations: {}
    spec:
      serviceAccountName: nri-bundle-newrelic-infrastructure
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      initContainers:
        - name: wait-for-nr-license-secret
          securityContext:
            privileged: false
            runAsGroup: 2000
            runAsUser: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/bitnami/kubectl:1.23.0
          command: [ "/bin/sh", "-c" ]
          args: [ "kubectl get secret $(SECRET_NAME) && echo 'INFO: NR secret object found, skipping waiting for job completion.' || kubectl wait --for=condition=Complete --timeout=$(WAIT_TIMEOUT_SEC)s job/$(JOB_NAME)" ]
          env:
            - name: "WAIT_TIMEOUT_SEC"
              value: "300"
            - name: "JOB_NAME"
              value: "newrelic-license-secret-exporter"
            - name: "SECRET_NAME"
              value: "newrelic-license-key"
      containers:
        - name: ksm
          image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/nri-kubernetes/dev:v1.18-release-branch-latest
          imagePullPolicy: Always
          securityContext:
            privileged: false
            runAsGroup: 2000
            runAsUser: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            - name: "NRI_KUBERNETES_SINK_HTTP_PORT"
              value: "8002"
            - name: "NRI_KUBERNETES_CLUSTERNAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['CLUSTER_NAME']
            - name: "NRI_KUBERNETES_VERBOSE"
              value: "false"
            - name: "NRI_KUBERNETES_NODENAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
          volumeMounts:
            - name: nri-kubernetes-config
              mountPath: /etc/newrelic-infra/nri-kubernetes.yml
              subPath: nri-kubernetes.yml
          resources: 
            limits:
              memory: 850M
            requests:
              cpu: 100m
              memory: 150M
        - name: forwarder
          image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/k8s-events-forwarder:1.36.1
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            runAsGroup: 2000
            runAsUser: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          ports:
            - containerPort: 8002
          env:
            - name: NRIA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: newrelic-license-key
                  key: NEW_RELIC_LICENSE_KEY
            - name: "NRIA_OVERRIDE_HOSTNAME_SHORT"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            - name: "K8S_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            - name: "NRIA_CUSTOM_ATTRIBUTES"
              value: '{"clusterName":"$(CLUSTER_NAME)"}'
            - name: "NRIA_PASSTHROUGH_ENVIRONMENT"
              value: "KUBERNETES_SERVICE_HOST,KUBERNETES_SERVICE_PORT,CLUSTER_NAME,CADVISOR_PORT,NRK8S_NODE_NAME,KUBE_STATE_METRICS_URL,KUBE_STATE_METRICS_POD_LABEL,TIMEOUT,ETCD_TLS_SECRET_NAME,ETCD_TLS_SECRET_NAMESPACE,API_SERVER_SECURE_PORT,KUBE_STATE_METRICS_SCHEME,KUBE_STATE_METRICS_PORT,SCHEDULER_ENDPOINT_URL,ETCD_ENDPOINT_URL,CONTROLLER_MANAGER_ENDPOINT_URL,API_SERVER_ENDPOINT_URL,DISABLE_KUBE_STATE_METRICS,DISCOVERY_CACHE_TTL"
          volumeMounts:
            - mountPath: /var/db/newrelic-infra/data
              name: forwarder-tmpfs-data
            - mountPath: /var/db/newrelic-infra/user_data
              name: forwarder-tmpfs-user-data
            - mountPath: /tmp
              name: forwarder-tmpfs-tmp
            - name: config
              mountPath: /etc/newrelic-infra.yml
              subPath: newrelic-infra.yml
          resources: 
            limits:
              memory: 850M
            requests:
              cpu: 100m
              memory: 150M
      volumes:
        - name: nri-kubernetes-config
          configMap:
            name: nri-bundle-nrk8s-ksm
            items:
              - key: nri-kubernetes.yml
                path: nri-kubernetes.yml
        - name: forwarder-tmpfs-data
          emptyDir: {}
        - name: forwarder-tmpfs-user-data
          emptyDir: {}
        - name: forwarder-tmpfs-tmp
          emptyDir: {}
        - name: config
          configMap:
            name: nri-bundle-nrk8s-agent-ksm
            items:
              - key: newrelic-infra.yml
                path: newrelic-infra.yml
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: kube-state-metrics
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists

---
# Source: New Relic Metadata deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nri-bundle-newrelic-metadata
  namespace: newrelic
  labels:
    app: newrelic-infrastructure
    chart: newrelic-infrastructure-1.6.2
    release: nri-bundle
    mode: privileged
spec:
  replicas: 1
  selector:
    matchLabels:
      app: newrelic-infrastructure
      release: nri-bundle
  template:
    metadata:
      labels:
        app: newrelic-infrastructure
        release: nri-bundle
        mode: privileged
      annotations: {}
    spec:
      serviceAccountName: nri-bundle-newrelic-infrastructure
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      initContainers:
        - name: wait-for-nr-license-secret
          image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/bitnami/kubectl:1.23.0
          command: [ "/bin/sh", "-c" ]
          args: [ "kubectl get secret $(SECRET_NAME) && echo 'INFO: NR secret object found, skipping waiting for job completion.' || kubectl wait --for=condition=Complete --timeout=$(WAIT_TIMEOUT_SEC)s job/$(JOB_NAME)" ]
          env:
            - name: "WAIT_TIMEOUT_SEC"
              value: "300"
            - name: "JOB_NAME"
              value: "newrelic-license-secret-exporter"
            - name: "SECRET_NAME"
              value: "newrelic-license-key"
      containers:
        - name: newrelic-infrastructure
          image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/infrastructure:1.37.2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            privileged: true
          env:
            - name: NRIA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: newrelic-license-key
                  key: NEW_RELIC_LICENSE_KEY
            - name: "CLUSTER_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['CLUSTER_NAME']
            - name: NRIA_DISABLE_CLOUD_INSTANCE_ID
              value: "true"
            - name: NRIA_DISABLE_CLOUD_METADATA
              value: "true"
            - name: NRIA_ENABLE_PROCESS_METRICS
              value: "false"
            - name: NRIA_METRICS_PROCESS_SAMPLE_RATE
              value: "-1"
            - name: "NRK8S_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            - name: "NRIA_CUSTOM_ATTRIBUTES"
              value: '{"clusterName":"$(CLUSTER_NAME)"}'
            - name: "NRIA_PASSTHROUGH_ENVIRONMENT"
              value: "CLUSTER_NAME"
          volumeMounts:
            - name: dev
              mountPath: /dev
            - name: host-docker-socket
              mountPath: /var/run/docker.sock
            - name: log
              mountPath: /var/log
            - name: host-volume
              mountPath: /host
              readOnly: true
            - name: pingmetadata
              mountPath: /etc/newrelic-infra/integrations.d
          resources:
            limits:
              cpu: 200m
              memory: 300M
            requests:
              cpu: 100m
              memory: 150M
      volumes:
        - name: dev
          hostPath:
            path: /dev
        - name: host-docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: log
          hostPath:
            path: /var/log
        - name: host-volume
          hostPath:
            path: /
        - name: pingmetadata
          configMap:
            name: pingmetadata
            items:
              - key: "pingmetadata.yaml"
                path: "pingmetadata.yaml"
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
