# Mappings for PingDirectory metrics sent to the statsd-exporter, which Prometheus will scrape
# See https://github.com/prometheus/statsd_exporter
apiVersion: v1
kind: ConfigMap
metadata:
  name: pingdirectory-statsd-mapping
data:
  pingdirectory-statsd-mapping.yml: |-
    mappings:
        # operation response time and throughput
      - match: "*.*.response-time"
        name: "response_time"
        labels:
          operation: "$2"
      - match: "*.*.throughput"
        name: "throughput"
        labels:
          operation: "$2"
        # connection handler metrics
      - match: "*.*.*.*.ldap-conn-handler-bytes-read"
        name: "LDAP_connection_handler_bytes_read"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-bytes-written"
        name: "LDAP_connection_handler_bytes_written"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-messages-read"
        name: "LDAP_connection_handler_messages_read"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-messages-written"
        name: "LDAP_connection_handler_messages_written"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-search-requests"
        name: "LDAP_connection_handler_search_requests"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-search-entries-returned"
        name: "LDAP_connection_handler_search_entries_returned"
        labels:
          port: "$4"
        # backend metrics
      - match: "*.backend-entry-count"
        name: "backend_entry_count"
        labels:
          backendID: "$1"
      - match: "*.backend-db-cache-percent-full"
        name: "backend_db_cache_percent_full"
        labels:
          backendID: "$1"
      - match: "*.backend-size-on-disk"
        name: "backend_size_on_disk"
        labels:
          backendID: "$1"
      - match: "*.backend-active-cleaner-threads"
        name: "backend_active_cleaner_threads"
        labels:
          backendID: "$1"
      - match: "*.backend-cleaner-backlog"
        name: "backend_cleaner_backlog"
        labels:
          backendID: "$1"
      - match: "*.backend-nodes-evicted"
        name: "backend_nodes_evicted"
        labels:
          backendID: "$1"
      - match: "*.backend-checkpoints"
        name: "backend_checkpoints"
        labels:
          backendID: "$1"
      - match: "*.backend-avg-checkpoint-duration"
        name: "backend_avg_checkpoint_duration"
        labels:
          backendID: "$1"
      - match: "*.backend-time-since-last-checkpoint"
        name: "backend_time_since_last_checkpoint"
        labels:
          backendID: "$1"
      - match: "*.backend-new-db-logs"
        name: "backend_new_db_logs"
        labels:
          backendID: "$1"
      - match: "*.backend-random-reads"
        name: "backend_random_reads"
        labels:
          backendID: "$1"
      - match: "*.backend-random-writes"
        name: "backend_random_writes"
        labels:
          backendID: "$1"
      - match: "*.backend-sequential-reads"
        name: "backend_sequential_reads"
        labels:
          backendID: "$1"
      - match: "*.backend-sequential-writes"
        name: "backend_sequential_writes"
        labels:
          backendID: "$1"
        # entry cache metrics
      - match: "*.entry-cache-hit-ratio"
        name: "entry_cache_hit_ratio"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-hit-count"
        name: "entry_cache_hit_count"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-attempts"
        name: "entry_cache_attempts"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-add-or-update"
        name: "entry_cache_add_or_update"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-size"
        name: "entry_cache_size"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-pct-full"
        name: "entry_cache_pct_full"
        labels:
          entryCache: "$1"
        # changelog metrics?
      - match: "changelog.*"
        name: "$1"
        lables:
          backendID: "changelog"
        # GC metrics
      - match: "*.*.*.garbage-collections"
        name: "garbage_collections"
        labels:
          gcType: "$1"
          size: "$2"
          cause: "$3"
      - match: "*.*.*.garbage-collection-duration"
        name: "garbage_collection_duration"
        labels:
          gcType: "$1"
          size: "$2"
          cause: "$3"
      - match: "*.garbage-collection-live-mbytes"
        name: "garbage_collection_live_megabytes"
        labels:
          region: "$1"
        #PD replicas
      - match: "^dc=(.*)_dc=(.*)\\.replica(.*)"
        match_type: regex
        name: "replica${3}"
        labels:
          UserBaseDN1: "$1"
          UserBaseDN2: "$2"
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: stunnel
data:
  stunnel.sh: |-
    #!/bin/sh

    if test "${TLS_TUNNEL_VERSIONS}" = 'null'; then
      TLS_TUNNEL_VERSIONS='TLSv1.2'
    elif test "${TLS_TUNNEL_VERSIONS}" != 'TLSv1.2'; then
      echo "Only TLSv1.2 is currently supported"
      exit 1
    fi

    echo "Configuring stunnel environment variables"
    STUNNEL_HOME=/home/stunnel
    STUNNEL_CONF_FILE="${STUNNEL_HOME}"/stunnel.conf

    STUNNEL_PID_DIR=/var/run/stunnel
    STUNNEL_PID_FILE="${STUNNEL_PID_DIR}"/stunnel.pid

    STUNNEL_LOG_DIR=/var/log/stunnel
    STUNNEL_LOG_FILE="${STUNNEL_LOG_DIR}"/stunnel.log

    STUNNEL_CA_FILE=/etc/ssl/certs/ca-certificates.crt

    STUNNEL_CRT_FILE="${STUNNEL_HOME}"/tls.crt
    STUNNEL_KEY_FILE="${STUNNEL_HOME}"/tls.key

    echo "Creating initial stunnel key-pair in file ${STUNNEL_CRT_FILE} and ${STUNNEL_KEY_FILE}"
    openssl req -x509 -nodes -newkey rsa:2048 -days 365 -subj '/CN=stunnel' \
        -keyout "${STUNNEL_KEY_FILE}" -out "${STUNNEL_CRT_FILE}"
    chmod 600 "${STUNNEL_KEY_FILE}"

    echo "Setting up stunnel config file ${STUNNEL_CONF_FILE}"

    cat > "${STUNNEL_CONF_FILE}" <<EOF
    pid = ${STUNNEL_PID_FILE}

    debug = 7
    output = ${STUNNEL_LOG_FILE}

    cert = ${STUNNEL_CRT_FILE}
    key = ${STUNNEL_KEY_FILE}

    socket = l:TCP_NODELAY=1
    socket = r:TCP_NODELAY=1

    CAfile = ${STUNNEL_CA_FILE}
    verifyChain = no

    foreground = yes
    client = no

    TIMEOUTbusy = -1
    TIMEOUTclose = -1
    TIMEOUTconnect = -1
    TIMEOUTidle = -1

    [ldaps]
    accept = 5678
    connect = localhost:${LDAP_PORT}
    delay = yes
    sslVersion = ${TLS_TUNNEL_VERSIONS}
    EOF

    if test "${TLS_TUNNEL_CIPHER_LIST}" != 'null'; then
      echo "Configuring TLS ciphers: ${TLS_TUNNEL_CIPHER_LIST}"
      echo "ciphers = ${TLS_TUNNEL_CIPHER_LIST}" >> "${STUNNEL_CONF_FILE}"
    fi

    echo "Contents of ${STUNNEL_CONF_FILE}:"
    cat "${STUNNEL_CONF_FILE}"

    wget https://storage.googleapis.com/kubernetes-release/release/v1.15.0/bin/linux/amd64/kubectl -P ${STUNNEL_HOME}
    chmod +x "${STUNNEL_HOME}"/kubectl

    echo "Creating the periodic script to get the ACME certificate"
    FETCH_CERT_SCRIPT="${STUNNEL_HOME}"/fetch-cert.sh

    cat > "${FETCH_CERT_SCRIPT}" <<EOF

    while true; do
      SECRET_FILE=\$(mktemp)
      ${STUNNEL_HOME}/kubectl get secret "${K8S_ACME_CERT_SECRET_NAME}" -o yaml 2> /dev/null > \${SECRET_FILE}

      if grep -q 'tls.crt' \${SECRET_FILE}; then
        TEMP_CRT_FILE=\$(mktemp)
        TEMP_KEY_FILE=\$(mktemp)

        grep 'tls.key' \${SECRET_FILE} | cut -d: -f2 | base64 -d > \${TEMP_KEY_FILE}
        grep 'tls.crt' \${SECRET_FILE} | cut -d: -f2 | base64 -d > \${TEMP_CRT_FILE}

        if ! diff \${TEMP_CRT_FILE} ${STUNNEL_CRT_FILE} > /dev/null; then
          mv \${TEMP_CRT_FILE} ${STUNNEL_CRT_FILE}
          mv \${TEMP_KEY_FILE} ${STUNNEL_KEY_FILE}

          PID=\$(pgrep stunnel)
          echo "Sending stunnel process PID \${PID} the HUP signal"
          kill -HUP \${PID}
          echo "stunnel config last reloaded at \$(date)"
        fi
      else
        echo "TLS key-pair not found in secret"
      fi

      sleep 60
    done

    EOF

    echo "Starting periodic certificate update checker in the background"
    chmod a+x "${FETCH_CERT_SCRIPT}"
    sh "${FETCH_CERT_SCRIPT}" &

    echo "Starting stunnel"
    exec stunnel "${STUNNEL_CONF_FILE}"
